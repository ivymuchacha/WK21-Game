{"version":3,"sources":["game/game.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Game","styled","div","Info","h2","Board","MemoBoard","memo","RealBoard","RealRow","RealCol","props","Black","Row","Col","y","x","App","useState","Array","fill","board","realboard","setRealBoard","isBlack","setIsBlack","winner","setWinner","caculateWinner","a","b","map","square","item","onClick","e","newBoard","JSON","parse","stringify","Winner","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.141913e0.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background: #E5D1D0;\n  }\n`\n\nconst Game = styled.div`\n  width:900px;\n  margin: 5% auto;\n  padding:30px;\n  display: flex;\n`\nconst Info = styled.h2`\n  margin-left:5%;\n`\n\nconst Board = styled.div`\n  position:absolute;\n  border: 2px solid black;\n  width:612px;\n  padding:1px;\n`\n\nconst MemoBoard = memo(Board);\n\nconst RealBoard = styled.div`\n  width:647px;\n  padding:1px;\n  transform: translate(-2.47%,-2.2%);\n`\n\nconst RealRow = styled.div`\n  display:flex;\n  border-radius: 50%;\n`\n\nconst RealCol = styled.div`\n  border-radius: 50%;\n  ${props => props.Black === 1 && \"background:black;\"};\n  ${props => props.Black === 2 && \"background:white;\"};\n  padding: 17px;\n`\n\nconst Row = styled.div`\n  display:flex;\n  border-radius: 50%;\n`\n\nconst Col = styled.div`\n  border: 1px solid black;\n  padding: 16px;\n`\n\nlet y = 0;\nlet x = 0;\nexport default function App() {  \n  const [board, setBoard] = useState(Array(18).fill(Array(18).fill(null)));\n  const [realboard, setRealBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [isBlack, setIsBlack] = useState(true);\n  const [winner ,setWinner] = useState(null);\n\n  // 判斷輸贏\n  const caculateWinner = (realboard) => {\n    for(let a = 0 ; a < 19; a ++) {\n      for(let b = 0; b < 19; b ++) {\n        // 四種可能\n        if(realboard[a][b] && \n          realboard[a][b] === realboard[a][b+1] && \n          realboard[a][b] === realboard[a][b+2] &&\n          realboard[a][b] === realboard[a][b+3] &&\n          realboard[a][b] === realboard[a][b+4]) {\n            return realboard[a][b];\n        } \n        if(realboard[a][b] && \n          realboard[a+1][b] === realboard[a][b] && \n          realboard[a+2][b] === realboard[a][b] &&\n          realboard[a+3][b] === realboard[a][b] &&\n          realboard[a+4][b] === realboard[a][b]){\n            return realboard[a][b];\n        }\n        if(realboard[a][b] && \n          realboard[a][b] === realboard[a+1][b+1] && \n          realboard[a][b] === realboard[a+2][b+2] &&\n          realboard[a][b] === realboard[a+3][b+3] &&\n          realboard[a][b] === realboard[a+4][b+4]){\n            return realboard[a][b];\n        }\n        if(realboard[a][b] && \n          realboard[a][b] === realboard[a+1][b-1] && \n          realboard[a][b] === realboard[a+2][b-2] &&\n          realboard[a][b] === realboard[a+3][b-3] &&\n          realboard[a][b] === realboard[a+4][b-4]){\n            return realboard[a][b];\n        }\n      }\n    } return null;\n  };\n\n  const handleClick = (x, y) => {\n    const newBoard = JSON.parse(JSON.stringify(realboard));\n    // 確認是否已有輸贏 決定是否可以繼續下棋\n    const GameStatus = caculateWinner(realboard);\n    if(!GameStatus) {\n      if(newBoard[y][x] === null){\n        if(isBlack){\n          newBoard[y][x] = 1;\n        } else {\n          newBoard[y][x] = 2;\n        }\n        setIsBlack(!isBlack);\n        setRealBoard(newBoard);\n      }\n    }\n    const Winner = caculateWinner(newBoard);\n    if (Winner) {\n      if(Winner === 1) {\n        setWinner('Black');\n      } else {\n        setWinner('White')\n      }\n    }\n  }\n \n  return(\n    <div>\n    <GlobalStyle/>\n    <Game>\n      <MemoBoard>\n        {\n          board.map((square, y) => <Row key={y}>{ \n            square.map((item,x) => <Col key={x}>{item}</Col>, x++)\n            }</Row>, y++)\n        }\n      </MemoBoard>\n      <RealBoard>\n        {\n          realboard.map( (square, y) => <RealRow key={y} y={y}>{ \n            square.map((item, x) => <RealCol key={x} x={x} Black={item} onClick={(e)=>{handleClick(x,y)}}></RealCol>, x++)\n            }</RealRow>, y++)\n        }\n      </RealBoard>\n      <Info>\n        {\n          winner ? `Winner is ${winner}`: `Next is ${isBlack ? \"Black\":\"White\"}`\n        } \n      </Info>\n    </Game>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}